rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - strict access control with organization isolation
    match /users/{userId} {
      // Users can only read their own document
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Only admins can read user documents from their same organization
      allow read: if request.auth != null && 
                     exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
                     resource.data.organization == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organization;
      
      // Users can update their own basic profile info (not role, points, or organization)
      allow update: if request.auth != null && 
                       request.auth.uid == userId &&
                       !('role' in request.resource.data.diff(resource.data).affectedKeys()) &&
                       !('points' in request.resource.data.diff(resource.data).affectedKeys()) &&
                       !('organization' in request.resource.data.diff(resource.data).affectedKeys());
      
      // Only admins can create users and update points/roles within their organization
      allow create: if request.auth != null && 
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
                       request.resource.data.organization == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organization;
      
      allow update: if request.auth != null && 
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
                       resource.data.organization == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organization;
      
      // Only admins can delete users within their organization
      allow delete: if request.auth != null && 
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
                      resource.data.organization == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organization;
    }
    
    // Departments collection - organization-scoped access
    match /departments/{departmentId} {
      // Users can only read departments from their organization
      allow read: if request.auth != null &&
                     exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                     resource.data.organization == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organization;
      
      // Only admins can create/update/delete departments within their organization
      allow create: if request.auth != null && 
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
                       request.resource.data.organization == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organization;
      
      allow update, delete: if request.auth != null && 
                              exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
                              resource.data.organization == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organization;
    }
    
    // Leaderboard collection (if used) - read for all authenticated, write for admins only
    match /leaderboard/{entryId} {
      allow read: if request.auth != null;
      
      allow create, update, delete: if request.auth != null && 
                                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Company codes collection - read access for code validation, write for admins
    match /companyCodes/{codeId} {
      // Anyone can read company codes (needed for employee access)
      allow read: if request.auth != null;
      
      // Only admins can create/update/delete company codes
      allow create, update, delete: if request.auth != null && 
                                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Audit logs (if implemented) - only admins can read/write
    match /audit_logs/{logId} {
      allow read, write: if request.auth != null && 
                           exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
